{"version":3,"sources":["cbody.js","util.js","app.js"],"names":["CBody","pos","vel","mass","color","a","x","y","F","dt","w","h","static","c","fillStyle","beginPath","arc","Math","PI","fill","closePath","dist","b","dx","dy","sqrt","vdist","abs","v","op","_","G","System","canvas","document","querySelector","width","documentElement","scrollWidth","height","scrollHeight","getContext","font","trail","resetBodies","mouse","vy","performance","now","addEventListener","click","bind","mousemove","keyup","quadratic","fps","timer","counter","current","time","_loop","loop","requestAnimationFrame","bodies","fillRect","fillText","blen","length","i","dead","splice","update","draw","j","d","dabs","Fabs","pow","applyForce","big","small","e","vx","clientX","clientY","push","random","key","window","app"],"mappings":"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","file":"app.790d5619.map","sourceRoot":"..","sourcesContent":["/**\r\n * Stands for \"Celestial Body\"...\r\n */\r\n\r\nexport default class CBody {\r\n  constructor(pos, vel, mass, color) {\r\n    this.pos = pos;\r\n    this.vel = vel;\r\n    this.a = { x: 0, y: 0 };\r\n    this.mass = mass;  // Mass == Radius\r\n    this.color = color;\r\n  }\r\n\r\n  applyForce(F) {\r\n    this.a.x += F.x;\r\n    this.a.y += F.y;\r\n  }\r\n\r\n  update(dt, w, h) {\r\n    if (this.static) return;\r\n\r\n    this.vel.x += dt * this.a.x / this.mass;\r\n    this.vel.y += dt * this.a.y / this.mass;\r\n\r\n    this.pos.x += this.vel.x * dt;\r\n    this.pos.y += this.vel.y * dt;\r\n\r\n         if (this.pos.x < -this.mass)  this.pos.x = w + this.mass;\r\n    else if (this.pos.x > this.mass+w) this.pos.x = -this.mass;\r\n         if (this.pos.y < -this.mass)  this.pos.y = h + this.mass;\r\n    else if (this.pos.y > this.mass+h) this.pos.y = -this.mass;\r\n\r\n    this.a.x = 0; this.a.y = 0;\r\n  }\r\n\r\n  draw(c) {\r\n    c.fillStyle = this.color;\r\n    c.beginPath();\r\n    c.arc(this.pos.x, this.pos.y, this.mass, 0, 2.0*Math.PI);\r\n    c.fill();\r\n    c.closePath();\r\n  }\r\n}","export function dist(a, b) {\r\n  let dx = a.x-b.x;\r\n  let dy = a.x-b.y;\r\n  return Math.sqrt(dx*dx + dy*dy);\r\n}\r\n\r\nexport function vdist(a, b) {\r\n  return { x: b.x-a.x, y: b.y-a.y };\r\n}\r\n\r\nexport function abs(v) {\r\n  return Math.sqrt(v.x*v.x + v.y*v.y);\r\n}\r\n\r\nexport function op(v) {\r\n  return { x: -v.x, y: -v.y };\r\n}","import CBody from \"./cbody\"\r\nimport * as _ from \"./util\"\r\n\r\n//-- Some constants --//\r\nlet G = 1000; // Yay! Made up values!\r\n\r\nclass System {\r\n  constructor() {\r\n    //-- Canvas stuff --//\r\n    this.canvas = document.querySelector('#canvas');\r\n    this.canvas.width = this.width = document.documentElement.scrollWidth;\r\n    this.canvas.height = this.height = document.documentElement.scrollHeight;\r\n    this.c = this.canvas.getContext('2d');\r\n    this.c.font = '12px \"Source Code Pro\", monospace';\r\n    this.trail = true;\r\n\r\n    // Start with a single body in the middle\r\n    this.resetBodies();\r\n\r\n    //-- Initialize mouse stuff --//\r\n    this.mouse = {\r\n      x: 0, y: 0,\r\n      vx: 0, vy: 0,\r\n      time: performance.now()\r\n    };\r\n    document.addEventListener('click', this.click.bind(this));\r\n    document.addEventListener('mousemove', this.mousemove.bind(this));\r\n\r\n    //-- Keyup... --//\r\n    document.addEventListener('keyup', this.keyup.bind(this));\r\n\r\n    //-- Physics --//\r\n    this.quadratic = 1;\r\n\r\n    //-- Starting loop --//\r\n    this.dt = .1;\r\n    this.fps = { timer: 0, counter: 0, current: 0 };\r\n    this.time = performance.now();\r\n    this._loop = this.loop.bind(this);\r\n    window.requestAnimationFrame(this._loop);\r\n  }\r\n\r\n  resetBodies() {\r\n    this.bodies = [\r\n      new CBody(\r\n        { x: this.width/2.0, y: this.height/2.0 },\r\n        { x:0, y:0 },\r\n        10,\r\n        'white'\r\n      )\r\n    ];\r\n  }\r\n\r\n  loop(time) {\r\n    //-- Update timer stuff --//\r\n    let dt = (time - this.time)/1000.0;  \r\n    this.time = time;\r\n\r\n    // Clear screen\r\n    // this.c.fillStyle = this.trail ? '#0b1c3810' : '#0b1c38';\r\n    this.c.fillStyle = this.trail ? 'rgba(0,0,0,.1)' : 'rgba(0,0,0,1)';\r\n    this.c.fillRect(0, 0, this.width, this.height);\r\n\r\n    // Show FPS (updated each second)\r\n    this.fps.timer += dt;\r\n    this.fps.counter++;\r\n    if (this.fps.timer >= 1.0) {\r\n      this.fps.current = this.fps.counter;\r\n      this.fps.counter = 0; \r\n      this.fps.timer = 0;\r\n    }\r\n    this.c.fillStyle = 'white';\r\n    this.c.fillText(this.fps.current + ' FPS', 25, 25);\r\n\r\n    //-- Update & Draw all celestial bodies --//\r\n    let blen = this.bodies.length;  // Slight optimizations! Hurray!\r\n    for (let i = 0; i < blen; i++) {\r\n      // Remove the 'dead' body (damn) and continue the loop like nothing happened\r\n      if (this.bodies[i].dead) { this.bodies.splice(i, 1); i--; blen--; continue; }\r\n      \r\n      // Update 'em & draw 'em\r\n      this.bodies[i].update(dt, this.width, this.height);\r\n      this.bodies[i].draw(this.c);\r\n      \r\n      // Interactions between bodies\r\n      for (let j = i+1; j < blen; j++) {\r\n        if (this.bodies[j].dead) { continue; }\r\n\r\n        // Calculate distance. Both vectorial and scalar\r\n        let d = _.vdist(this.bodies[i].pos, this.bodies[j].pos);\r\n        let dabs = _.abs(d);\r\n        \r\n        // Gravitational force\r\n        let Fabs = ((this.quadratic ? 500*G : G) * this.bodies[i].mass * this.bodies[j].mass) / Math.pow(dabs, this.quadratic+2);\r\n        let F = { x: d.x*Fabs, y: d.y*Fabs };\r\n        this.bodies[i].applyForce(F);\r\n        this.bodies[j].applyForce(_.op(F));\r\n        \r\n        // Collision\r\n        if (dabs < this.bodies[i].mass + this.bodies[j].mass) {\r\n          // Choose which body is the bigger and which is the smaller one\r\n          let big, small;\r\n          if (this.bodies[i].mass > this.bodies[j].mass) { big = this.bodies[i]; small = this.bodies[j]; }\r\n          else { big = this.bodies[j]; small = this.bodies[i]; }\r\n          \r\n          // The big one 'absorbs' the small's mass, whilst the small one dies a horrible death\r\n          big.mass += small.mass;\r\n          small.dead = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    window.requestAnimationFrame(this._loop);\r\n  }\r\n\r\n  mousemove(e) {\r\n    let now = performance.now();\r\n    let dt = (now - this.mouse.time) / 1000.0;\r\n\r\n    this.mouse.vx = (e.clientX - this.mouse.x) / dt;\r\n    this.mouse.vy = (e.clientY - this.mouse.y) / dt;\r\n\r\n    this.mouse.time = now;\r\n    this.mouse.x = e.clientX;\r\n    this.mouse.y = e.clientY;\r\n  }\r\n\r\n  click(e) {\r\n    let v;\r\n    if (performance.now() - this.mouse.time > 150) { // More than 150 ms have passed since the last mousemove\r\n      v = { x: 0, y: 0 };\r\n    } else {\r\n      v = { x: this.mouse.vx, y: this.mouse.vy };\r\n    }\r\n\r\n    this.bodies.push(new CBody(\r\n      { x: e.clientX, y: e.clientY },\r\n      v, \r\n      4,\r\n      `hsl(${Math.random()*360}, 80%, 75%)`\r\n    ));\r\n  }\r\n\r\n  keyup(e) {\r\n    if (e.key === 'r') {\r\n      this.resetBodies();\r\n    } else if (e.key === 's') {\r\n      this.bodies[0].pos = { x: this.width/2.0, y: this.height/2.0 };\r\n      this.bodies[0].vel = { x: 0, y: 0 };\r\n      this.bodies[0].a = { x: 0, y: 0 };\r\n      this.bodies[0].static = !this.bodies[0].static;\r\n    } else if (e.key === 't') {\r\n      this.trail = !this.trail; \r\n    } else if (e.key === 'q') {\r\n      this.quadratic = 1 - this.quadratic;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nwindow.app = new System();\r\n\r\n"]}